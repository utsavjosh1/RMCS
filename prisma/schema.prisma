// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  players       Player[]
  gameStats     GameStats?
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameStats {
  id            String @id @default(cuid())
  userId        String @unique
  gamesPlayed   Int    @default(0)
  gamesWon      Int    @default(0)
  roomsCreated  Int    @default(0)
  totalScore    Int    @default(0)
  user          User   @relation(fields: [userId], references: [id])
}

model GameRoom {
  id          String       @id @default(cuid())
  roomCode    String       @unique @db.Char(6)
  title       String
  imageUrl    String
  status      RoomStatus
  createdAt   DateTime     @default(now())
  hostId      String
  hostName    String
  isPrivate   Boolean
  players     RoomPlayers?
  playersList Player[]     @relation("RoomPlayersList")
}

model Player {
  id       String    @id
  name     String
  isReady  Boolean
  joinedAt DateTime
  room     GameRoom? @relation("RoomPlayersList", fields: [roomId], references: [id])
  roomId   String?
  user     User?     @relation(fields: [userId], references: [id])
  userId   String?
}

model RoomPlayers {
  id      String   @id @default(cuid())
  current Int
  max     Int
  roomId  String   @unique
  room    GameRoom @relation(fields: [roomId], references: [id])
}

enum RoomStatus {
  waiting
  in_progress
  finished
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  email     String
  content   String   @db.Text
  rating    Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
